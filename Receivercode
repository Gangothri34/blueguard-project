#include <SPI.h>
#include <LoRa.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecureBearSSL.h>

// ---------- WiFi ----------
const char* ssid = "Z";             // Replace with your WiFi SSID
const char* pass = "1234567890";    // Replace with your WiFi password

// ---------- Azure Function URL ----------
// ‚ö†Ô∏è Replace this with the REAL function URL (from Azure ‚Üí Function ‚Üí Get Function URL)
const char* azureFuncUrl ="https://<your-function-name>.azurewebsites.net/api/HttpTrigger1?code=<your-function-key>";
// ---------- LoRa Pins ----------
#define SS D8
#define RST D0
#define DIO0 D2

void setup() {
  Serial.begin(9600);
  delay(1000);
  Serial.println("üì° LoRa Receiver Starting...");

  // ---- WiFi Connect ----
  WiFi.begin(ssid, pass);
  Serial.print("Connecting to WiFi");
  int counter = 0;
  while(WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.print(".");
    counter++;
    if(counter > 40){  // 20 sec timeout
      Serial.println("\n‚ö† WiFi connection failed!");
      break;
    }
  }
  if(WiFi.status() == WL_CONNECTED){
    Serial.println("\n‚úÖ WiFi Connected! IP: " + WiFi.localIP().toString());
  }

  // ---- LoRa Init ----
  LoRa.setPins(SS, RST, DIO0);
  if(!LoRa.begin(433E6)){  // Adjust frequency if needed
    Serial.println("‚ùå LoRa init failed!");
    while(1);
  }
  Serial.println("üì° LoRa Receiver Ready");
}

// ---- Function to send payload to Azure ----
void sendToAzure(String payload){
  if(WiFi.status() == WL_CONNECTED){
    HTTPClient http;
    std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);
    client->setInsecure(); // skip SSL cert check for testing

    http.begin(*client, azureFuncUrl);
    http.addHeader("Content-Type", "application/json");

    int httpCode = http.POST(payload);
    if(httpCode > 0){
      Serial.printf("üåê Azure Response Code: %d\n", httpCode);
      String response = http.getString();
      Serial.println("Azure replied: " + response);
    } else {
      Serial.printf("HTTP POST failed: %s\n", http.errorToString(httpCode).c_str());
    }
    http.end();
  } else {
    Serial.println("‚ö† WiFi not connected, cannot send to Azure.");
  }
} //any change for this reciver code 

void loop() {
  int packetSize = LoRa.parsePacket();
  if(packetSize){
    String incoming = "";
    while(LoRa.available()){
      incoming += (char)LoRa.read();
    }

    Serial.println("\nüì© Received LoRa: " + incoming);

    // Detect SOS
    if(incoming.indexOf("\"SOS\":1") >= 0){
      Serial.println("üö® SOS Alert Detected!");
    }

    // Forward payload to Azure
    sendToAzure(incoming);
  }
}
